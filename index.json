{
  "api/Bonsai.Sleap.BodyPart.html": {
    "href": "api/Bonsai.Sleap.BodyPart.html",
    "title": "Class BodyPart | Bonsai.SLEAP",
    "keywords": "Class BodyPart Namespace Bonsai.Sleap Assembly Bonsai.Sleap.dll Represents a body part, or node in the skeleton graph of the animal. Nodes can be defined without being part of a skeleton. public class BodyPart Inheritance object BodyPart Derived Centroid Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Confidence Gets or sets the confidence score for the predicted location. public float Confidence { get; set; } Property Value float Name Gets or sets the name of the body part. public string Name { get; set; } Property Value string Position Gets or sets the predicted location of the body part. public Point2f Position { get; set; } Property Value Point2f"
  },
  "api/Bonsai.Sleap.Centroid.html": {
    "href": "api/Bonsai.Sleap.Centroid.html",
    "title": "Class Centroid | Bonsai.SLEAP",
    "keywords": "Class Centroid Namespace Bonsai.Sleap Assembly Bonsai.Sleap.dll Represents a center point used for cropping. public class Centroid : BodyPart Inheritance object BodyPart Centroid Inherited Members BodyPart.Name BodyPart.Position BodyPart.Confidence object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Centroid(IplImage) Initializes a new instance of the Centroid class extracted from the specified image. public Centroid(IplImage image) Parameters image IplImage The image from which the centroid was extracted. Properties Image Gets the image from which the centroid was extracted. public IplImage Image { get; } Property Value IplImage"
  },
  "api/Bonsai.Sleap.CentroidCollection.html": {
    "href": "api/Bonsai.Sleap.CentroidCollection.html",
    "title": "Class CentroidCollection | Bonsai.SLEAP",
    "keywords": "Class CentroidCollection Namespace Bonsai.Sleap Assembly Bonsai.Sleap.dll Represents a collection of image centroids. public class CentroidCollection : Collection<Centroid>, IList<Centroid>, ICollection<Centroid>, IList, ICollection, IReadOnlyList<Centroid>, IReadOnlyCollection<Centroid>, IEnumerable<Centroid>, IEnumerable Inheritance object Collection<Centroid> CentroidCollection Implements IList<Centroid> ICollection<Centroid> IList ICollection IReadOnlyList<Centroid> IReadOnlyCollection<Centroid> IEnumerable<Centroid> IEnumerable Inherited Members Collection<Centroid>.Add(Centroid) Collection<Centroid>.Clear() Collection<Centroid>.CopyTo(Centroid[], int) Collection<Centroid>.Contains(Centroid) Collection<Centroid>.GetEnumerator() Collection<Centroid>.IndexOf(Centroid) Collection<Centroid>.Insert(int, Centroid) Collection<Centroid>.Remove(Centroid) Collection<Centroid>.RemoveAt(int) Collection<Centroid>.ClearItems() Collection<Centroid>.InsertItem(int, Centroid) Collection<Centroid>.RemoveItem(int) Collection<Centroid>.SetItem(int, Centroid) Collection<Centroid>.Count Collection<Centroid>.Items Collection<Centroid>.this[int] object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors CentroidCollection(IplImage) Initializes a new instance of the CentroidCollection class extracted from the specified image. public CentroidCollection(IplImage image) Parameters image IplImage The image from which the centroids were extracted. Properties Image Gets the image from which the centroids were extracted. public IplImage Image { get; } Property Value IplImage"
  },
  "api/Bonsai.Sleap.Design.CentroidCollectionVisualizer.html": {
    "href": "api/Bonsai.Sleap.Design.CentroidCollectionVisualizer.html",
    "title": "Class CentroidCollectionVisualizer | Bonsai.SLEAP",
    "keywords": "Class CentroidCollectionVisualizer Namespace Bonsai.Sleap.Design Assembly Bonsai.Sleap.Design.dll Provides a type visualizer that draws a visual representation of the collection of detected image centroids. public class CentroidCollectionVisualizer : IplImageVisualizer Inheritance object DialogTypeVisualizer MashupVisualizer DialogMashupVisualizer ImageMashupVisualizer IplImageVisualizer CentroidCollectionVisualizer Inherited Members IplImageVisualizer.StatusStripEnabled IplImageVisualizer.StatusStrip IplImageVisualizer.VisualizerCanvas ImageMashupVisualizer.UpdateValues(IList<object>) ImageMashupVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) ImageMashupVisualizer.VisualizerImage MashupVisualizer.LoadMashups(IServiceProvider) MashupVisualizer.UnloadMashups() MashupVisualizer.GetMashupSource(int, int) MashupVisualizer.MashupSources DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties DrawLabels Gets or sets a value indicating whether to show the centroid anchor names. public bool DrawLabels { get; set; } Property Value bool Methods Load(IServiceProvider) Loads type visualizer resources using the specified service provider. public override void Load(IServiceProvider provider) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. RenderFrame() Renders all graphics to the visualizer canvas. Override this method to overlay additional graphics elements on top of the image texture. protected override void RenderFrame() Show(object) Updates the type visualizer to display the specified value object. public override void Show(object value) Parameters value object The value to visualize. ShowMashup(IList<object>) Combines the specified collection of values into a single image mashup. protected override void ShowMashup(IList<object> values) Parameters values IList<object> The collection of values to be displayed by the mashup visualizer. Unload() Unloads all type visualizer resources. public override void Unload()"
  },
  "api/Bonsai.Sleap.Design.CentroidVisualizer.html": {
    "href": "api/Bonsai.Sleap.Design.CentroidVisualizer.html",
    "title": "Class CentroidVisualizer | Bonsai.SLEAP",
    "keywords": "Class CentroidVisualizer Namespace Bonsai.Sleap.Design Assembly Bonsai.Sleap.Design.dll Provides a type visualizer that draws a visual representation of a detected image centroid. public class CentroidVisualizer : IplImageVisualizer Inheritance object DialogTypeVisualizer MashupVisualizer DialogMashupVisualizer ImageMashupVisualizer IplImageVisualizer CentroidVisualizer Inherited Members IplImageVisualizer.StatusStripEnabled IplImageVisualizer.StatusStrip IplImageVisualizer.VisualizerCanvas ImageMashupVisualizer.UpdateValues(IList<object>) ImageMashupVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) ImageMashupVisualizer.VisualizerImage MashupVisualizer.LoadMashups(IServiceProvider) MashupVisualizer.UnloadMashups() MashupVisualizer.GetMashupSource(int, int) MashupVisualizer.MashupSources DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties DrawLabels Gets or sets a value indicating whether to show the centroid anchor name. public bool DrawLabels { get; set; } Property Value bool Methods Load(IServiceProvider) Loads type visualizer resources using the specified service provider. public override void Load(IServiceProvider provider) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. RenderFrame() Renders all graphics to the visualizer canvas. Override this method to overlay additional graphics elements on top of the image texture. protected override void RenderFrame() Show(object) Updates the type visualizer to display the specified value object. public override void Show(object value) Parameters value object The value to visualize. ShowMashup(IList<object>) Combines the specified collection of values into a single image mashup. protected override void ShowMashup(IList<object> values) Parameters values IList<object> The collection of values to be displayed by the mashup visualizer. Unload() Unloads all type visualizer resources. public override void Unload()"
  },
  "api/Bonsai.Sleap.Design.PoseCollectionVisualizer.html": {
    "href": "api/Bonsai.Sleap.Design.PoseCollectionVisualizer.html",
    "title": "Class PoseCollectionVisualizer | Bonsai.SLEAP",
    "keywords": "Class PoseCollectionVisualizer Namespace Bonsai.Sleap.Design Assembly Bonsai.Sleap.Design.dll Provides a type visualizer that draws a visual representation of the collection of poses extracted from each image in the sequence. public class PoseCollectionVisualizer : IplImageVisualizer Inheritance object DialogTypeVisualizer MashupVisualizer DialogMashupVisualizer ImageMashupVisualizer IplImageVisualizer PoseCollectionVisualizer Inherited Members IplImageVisualizer.StatusStripEnabled IplImageVisualizer.StatusStrip IplImageVisualizer.VisualizerCanvas ImageMashupVisualizer.UpdateValues(IList<object>) ImageMashupVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) ImageMashupVisualizer.VisualizerImage MashupVisualizer.LoadMashups(IServiceProvider) MashupVisualizer.UnloadMashups() MashupVisualizer.GetMashupSource(int, int) MashupVisualizer.MashupSources DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties DrawLabels Gets or sets a value indicating whether to show the names of body parts. public bool DrawLabels { get; set; } Property Value bool Methods Load(IServiceProvider) Loads type visualizer resources using the specified service provider. public override void Load(IServiceProvider provider) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. RenderFrame() Renders all graphics to the visualizer canvas. Override this method to overlay additional graphics elements on top of the image texture. protected override void RenderFrame() Show(object) Updates the type visualizer to display the specified value object. public override void Show(object value) Parameters value object The value to visualize. ShowMashup(IList<object>) Combines the specified collection of values into a single image mashup. protected override void ShowMashup(IList<object> values) Parameters values IList<object> The collection of values to be displayed by the mashup visualizer. Unload() Unloads all type visualizer resources. public override void Unload()"
  },
  "api/Bonsai.Sleap.Design.PoseIdentityCollectionVisualizer.html": {
    "href": "api/Bonsai.Sleap.Design.PoseIdentityCollectionVisualizer.html",
    "title": "Class PoseIdentityCollectionVisualizer | Bonsai.SLEAP",
    "keywords": "Class PoseIdentityCollectionVisualizer Namespace Bonsai.Sleap.Design Assembly Bonsai.Sleap.Design.dll Provides a type visualizer that draws a visual representation of the collection of pose identities extracted from each image in the sequence. public class PoseIdentityCollectionVisualizer : IplImageVisualizer Inheritance object DialogTypeVisualizer MashupVisualizer DialogMashupVisualizer ImageMashupVisualizer IplImageVisualizer PoseIdentityCollectionVisualizer Inherited Members IplImageVisualizer.StatusStripEnabled IplImageVisualizer.StatusStrip IplImageVisualizer.VisualizerCanvas ImageMashupVisualizer.UpdateValues(IList<object>) ImageMashupVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) ImageMashupVisualizer.VisualizerImage MashupVisualizer.LoadMashups(IServiceProvider) MashupVisualizer.UnloadMashups() MashupVisualizer.GetMashupSource(int, int) MashupVisualizer.MashupSources DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties DrawIdentity Gets or sets a value indicating whether to show the pose identities. public bool DrawIdentity { get; set; } Property Value bool Methods Load(IServiceProvider) Loads type visualizer resources using the specified service provider. public override void Load(IServiceProvider provider) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. RenderFrame() Renders all graphics to the visualizer canvas. Override this method to overlay additional graphics elements on top of the image texture. protected override void RenderFrame() Show(object) Updates the type visualizer to display the specified value object. public override void Show(object value) Parameters value object The value to visualize. ShowMashup(IList<object>) Combines the specified collection of values into a single image mashup. protected override void ShowMashup(IList<object> values) Parameters values IList<object> The collection of values to be displayed by the mashup visualizer. Unload() Unloads all type visualizer resources. public override void Unload()"
  },
  "api/Bonsai.Sleap.Design.PoseIdentityVisualizer.html": {
    "href": "api/Bonsai.Sleap.Design.PoseIdentityVisualizer.html",
    "title": "Class PoseIdentityVisualizer | Bonsai.SLEAP",
    "keywords": "Class PoseIdentityVisualizer Namespace Bonsai.Sleap.Design Assembly Bonsai.Sleap.Design.dll Provides a type visualizer that draws a visual representation of the estimated pose and identity extracted from each image in the sequence. public class PoseIdentityVisualizer : IplImageVisualizer Inheritance object DialogTypeVisualizer MashupVisualizer DialogMashupVisualizer ImageMashupVisualizer IplImageVisualizer PoseIdentityVisualizer Inherited Members IplImageVisualizer.StatusStripEnabled IplImageVisualizer.StatusStrip IplImageVisualizer.VisualizerCanvas ImageMashupVisualizer.UpdateValues(IList<object>) ImageMashupVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) ImageMashupVisualizer.VisualizerImage MashupVisualizer.LoadMashups(IServiceProvider) MashupVisualizer.UnloadMashups() MashupVisualizer.GetMashupSource(int, int) MashupVisualizer.MashupSources DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties DrawIdentity Gets or sets a value indicating whether to show the pose identity. public bool DrawIdentity { get; set; } Property Value bool DrawLabels Gets or sets a value indicating whether to show the names of body parts. public bool DrawLabels { get; set; } Property Value bool Methods Load(IServiceProvider) Loads type visualizer resources using the specified service provider. public override void Load(IServiceProvider provider) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. RenderFrame() Renders all graphics to the visualizer canvas. Override this method to overlay additional graphics elements on top of the image texture. protected override void RenderFrame() Show(object) Updates the type visualizer to display the specified value object. public override void Show(object value) Parameters value object The value to visualize. ShowMashup(IList<object>) Combines the specified collection of values into a single image mashup. protected override void ShowMashup(IList<object> values) Parameters values IList<object> The collection of values to be displayed by the mashup visualizer. Unload() Unloads all type visualizer resources. public override void Unload()"
  },
  "api/Bonsai.Sleap.Design.PoseVisualizer.html": {
    "href": "api/Bonsai.Sleap.Design.PoseVisualizer.html",
    "title": "Class PoseVisualizer | Bonsai.SLEAP",
    "keywords": "Class PoseVisualizer Namespace Bonsai.Sleap.Design Assembly Bonsai.Sleap.Design.dll Provides a type visualizer that draws a visual representation of a single pose extracted from each image in the sequence. public class PoseVisualizer : IplImageVisualizer Inheritance object DialogTypeVisualizer MashupVisualizer DialogMashupVisualizer ImageMashupVisualizer IplImageVisualizer PoseVisualizer Inherited Members IplImageVisualizer.StatusStripEnabled IplImageVisualizer.StatusStrip IplImageVisualizer.VisualizerCanvas ImageMashupVisualizer.UpdateValues(IList<object>) ImageMashupVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) ImageMashupVisualizer.VisualizerImage MashupVisualizer.LoadMashups(IServiceProvider) MashupVisualizer.UnloadMashups() MashupVisualizer.GetMashupSource(int, int) MashupVisualizer.MashupSources DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties DrawLabels Gets or sets a value indicating whether to show the names of body parts. public bool DrawLabels { get; set; } Property Value bool Methods Load(IServiceProvider) Loads type visualizer resources using the specified service provider. public override void Load(IServiceProvider provider) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. RenderFrame() Renders all graphics to the visualizer canvas. Override this method to overlay additional graphics elements on top of the image texture. protected override void RenderFrame() Show(object) Updates the type visualizer to display the specified value object. public override void Show(object value) Parameters value object The value to visualize. ShowMashup(IList<object>) Combines the specified collection of values into a single image mashup. protected override void ShowMashup(IList<object> values) Parameters values IList<object> The collection of values to be displayed by the mashup visualizer. Unload() Unloads all type visualizer resources. public override void Unload()"
  },
  "api/Bonsai.Sleap.Design.html": {
    "href": "api/Bonsai.Sleap.Design.html",
    "title": "Namespace Bonsai.Sleap.Design | Bonsai.SLEAP",
    "keywords": "Namespace Bonsai.Sleap.Design Classes CentroidCollectionVisualizer Provides a type visualizer that draws a visual representation of the collection of detected image centroids. CentroidVisualizer Provides a type visualizer that draws a visual representation of a detected image centroid. PoseCollectionVisualizer Provides a type visualizer that draws a visual representation of the collection of poses extracted from each image in the sequence. PoseIdentityCollectionVisualizer Provides a type visualizer that draws a visual representation of the collection of pose identities extracted from each image in the sequence. PoseIdentityVisualizer Provides a type visualizer that draws a visual representation of the estimated pose and identity extracted from each image in the sequence. PoseVisualizer Provides a type visualizer that draws a visual representation of a single pose extracted from each image in the sequence."
  },
  "api/Bonsai.Sleap.FindPoseIdentityMatching.html": {
    "href": "api/Bonsai.Sleap.FindPoseIdentityMatching.html",
    "title": "Class FindPoseIdentityMatching | Bonsai.SLEAP",
    "keywords": "Class FindPoseIdentityMatching Namespace Bonsai.Sleap Assembly Bonsai.Sleap.dll Represents an operator that returns a collection of poses where each distinct identity class has been matched to a single high confidence pose. [WorkflowElementCategory(ElementCategory.Transform)] public class FindPoseIdentityMatching : Transform<PoseIdentityCollection, PoseIdentityCollection> Inheritance object Combinator<PoseIdentityCollection, PoseIdentityCollection> Transform<PoseIdentityCollection, PoseIdentityCollection> FindPoseIdentityMatching Inherited Members Combinator<PoseIdentityCollection, PoseIdentityCollection>.Process(IObservable<PoseIdentityCollection>) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks Each pose can be matched to only one identity class. If no poses are found for a given identity, a default pose is returned as representative of that identity class. Properties IdentityMinConfidence Gets or sets a value specifying the minimum confidence value used to match an identity class. If no value is specified, identity classes will be matched to poses regardless of the identity confidence value. [Range(0, 1)] public float? IdentityMinConfidence { get; set; } Property Value float? Methods Process(IObservable<PoseIdentityCollection>) Returns a collection of poses where each distinct model class has been matched to a single high confidence pose. public override IObservable<PoseIdentityCollection> Process(IObservable<PoseIdentityCollection> source) Parameters source IObservable<PoseIdentityCollection> The sequence of identified poses from which to find the highest confidence identities for each distinct model class. Returns IObservable<PoseIdentityCollection> A sequence of PoseIdentityCollection objects representing the poses matched to each distinct model class."
  },
  "api/Bonsai.Sleap.GetBodyPart.html": {
    "href": "api/Bonsai.Sleap.GetBodyPart.html",
    "title": "Class GetBodyPart | Bonsai.SLEAP",
    "keywords": "Class GetBodyPart Namespace Bonsai.Sleap Assembly Bonsai.Sleap.dll Represents an operator that returns the body part with the specified name for each pose in the sequence. public class GetBodyPart : Transform<Pose, BodyPart> Inheritance object Combinator<Pose, BodyPart> Transform<Pose, BodyPart> GetBodyPart Inherited Members Combinator<Pose, BodyPart>.Process(IObservable<Pose>) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Name Gets or sets the name of the body part to locate in each pose object. public string Name { get; set; } Property Value string Methods Process(IObservable<Pose>) Returns the body part with the specified name for each pose in an observable sequence. public override IObservable<BodyPart> Process(IObservable<Pose> source) Parameters source IObservable<Pose> The sequence of poses for which to locate the body part. Returns IObservable<BodyPart> A sequence of BodyPart objects representing the location of the body part with the specified name. If no body part with the specified name is found, a default value is returned."
  },
  "api/Bonsai.Sleap.GetMaximumConfidencePoseIdentity.html": {
    "href": "api/Bonsai.Sleap.GetMaximumConfidencePoseIdentity.html",
    "title": "Class GetMaximumConfidencePoseIdentity | Bonsai.SLEAP",
    "keywords": "Class GetMaximumConfidencePoseIdentity Namespace Bonsai.Sleap Assembly Bonsai.Sleap.dll Represents an operator that returns the pose with the highest identity confidence for each collection in the sequence, using the optional class label. [WorkflowElementCategory(ElementCategory.Transform)] public class GetMaximumConfidencePoseIdentity : Transform<PoseIdentityCollection, PoseIdentity> Inheritance object Combinator<PoseIdentityCollection, PoseIdentity> Transform<PoseIdentityCollection, PoseIdentity> GetMaximumConfidencePoseIdentity Inherited Members Combinator<PoseIdentityCollection, PoseIdentity>.Process(IObservable<PoseIdentityCollection>) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Identity Gets or sets the optional class label used to filter the pose collection. public string Identity { get; set; } Property Value string Methods Process(IObservable<PoseIdentityCollection>) Returns the pose with the highest identity confidence for each pose collection in an observable sequence, using the optional class label. public override IObservable<PoseIdentity> Process(IObservable<PoseIdentityCollection> source) Parameters source IObservable<PoseIdentityCollection> The sequence of identified poses for which to extract the identity with highest confidence score. Returns IObservable<PoseIdentity> A sequence of the poses with highest identity confidence for each pose collection in the source sequence."
  },
  "api/Bonsai.Sleap.IModelInfo.html": {
    "href": "api/Bonsai.Sleap.IModelInfo.html",
    "title": "Interface IModelInfo | Bonsai.SLEAP",
    "keywords": "Interface IModelInfo Namespace Bonsai.Sleap Assembly Bonsai.Sleap.dll Provides information about the model used for inference. public interface IModelInfo Properties AnchorName Gets the name of the anchor part. string AnchorName { get; } Property Value string ClassNames Gets the collection of class names used to assign pose identities. IReadOnlyList<string> ClassNames { get; } Property Value IReadOnlyList<string> ModelType Gets the type of SLEAP model used for inference. ModelType ModelType { get; } Property Value ModelType PartNames Gets the collection of body part names. IReadOnlyList<string> PartNames { get; } Property Value IReadOnlyList<string>"
  },
  "api/Bonsai.Sleap.ModelType.html": {
    "href": "api/Bonsai.Sleap.ModelType.html",
    "title": "Enum ModelType | Bonsai.SLEAP",
    "keywords": "Enum ModelType Namespace Bonsai.Sleap Assembly Bonsai.Sleap.dll Specifies the type of SLEAP model. public enum ModelType Fields CenteredInstance = 3 A model for centered instance pose estimation. Centroid = 2 A model for centroid-only pose estimation. InvalidModel = 0 A model type which is unsupported by this package. MultiClass = 5 A model for multi-class multi-instance pose estimation. MultiInstance = 4 A model for multi instance pose estimation. SingleInstance = 1 A model for single instance pose estimation."
  },
  "api/Bonsai.Sleap.Pose.html": {
    "href": "api/Bonsai.Sleap.Pose.html",
    "title": "Class Pose | Bonsai.SLEAP",
    "keywords": "Class Pose Namespace Bonsai.Sleap Assembly Bonsai.Sleap.dll Represents the result of pose estimation as a collection of body parts. public class Pose : KeyedCollection<string, BodyPart>, IList<BodyPart>, ICollection<BodyPart>, IList, ICollection, IReadOnlyList<BodyPart>, IReadOnlyCollection<BodyPart>, IEnumerable<BodyPart>, IEnumerable Inheritance object Collection<BodyPart> KeyedCollection<string, BodyPart> Pose Implements IList<BodyPart> ICollection<BodyPart> IList ICollection IReadOnlyList<BodyPart> IReadOnlyCollection<BodyPart> IEnumerable<BodyPart> IEnumerable Derived PoseIdentity Inherited Members KeyedCollection<string, BodyPart>.Contains(string) KeyedCollection<string, BodyPart>.Remove(string) KeyedCollection<string, BodyPart>.ChangeItemKey(BodyPart, string) KeyedCollection<string, BodyPart>.ClearItems() KeyedCollection<string, BodyPart>.GetKeyForItem(BodyPart) KeyedCollection<string, BodyPart>.InsertItem(int, BodyPart) KeyedCollection<string, BodyPart>.RemoveItem(int) KeyedCollection<string, BodyPart>.SetItem(int, BodyPart) KeyedCollection<string, BodyPart>.Comparer KeyedCollection<string, BodyPart>.this[string] KeyedCollection<string, BodyPart>.Dictionary Collection<BodyPart>.Add(BodyPart) Collection<BodyPart>.Clear() Collection<BodyPart>.CopyTo(BodyPart[], int) Collection<BodyPart>.Contains(BodyPart) Collection<BodyPart>.GetEnumerator() Collection<BodyPart>.IndexOf(BodyPart) Collection<BodyPart>.Insert(int, BodyPart) Collection<BodyPart>.Remove(BodyPart) Collection<BodyPart>.RemoveAt(int) Collection<BodyPart>.ClearItems() Collection<BodyPart>.InsertItem(int, BodyPart) Collection<BodyPart>.RemoveItem(int) Collection<BodyPart>.SetItem(int, BodyPart) Collection<BodyPart>.Count Collection<BodyPart>.Items Collection<BodyPart>.this[int] object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Pose(IplImage, IModelInfo) Initializes a new instance of the Pose class extracted from the specified image. public Pose(IplImage image, IModelInfo model) Parameters image IplImage The image from which the pose was extracted. model IModelInfo Information about the model used to extract the pose. Properties Centroid Gets or sets the center point used for cropping. public BodyPart Centroid { get; set; } Property Value BodyPart Image Gets the image from which the pose was extracted. public IplImage Image { get; } Property Value IplImage Model Gets information about the model used to extract the pose. public IModelInfo Model { get; } Property Value IModelInfo Methods GetKeyForItem(BodyPart) When implemented in a derived class, extracts the key from the specified element. protected override string GetKeyForItem(BodyPart item) Parameters item BodyPart The element from which to extract the key. Returns string The key for the specified element."
  },
  "api/Bonsai.Sleap.PoseCollection.html": {
    "href": "api/Bonsai.Sleap.PoseCollection.html",
    "title": "Class PoseCollection | Bonsai.SLEAP",
    "keywords": "Class PoseCollection Namespace Bonsai.Sleap Assembly Bonsai.Sleap.dll Represents a collection of poses extracted from a specified image. public class PoseCollection : Collection<Pose>, IList<Pose>, ICollection<Pose>, IList, ICollection, IReadOnlyList<Pose>, IReadOnlyCollection<Pose>, IEnumerable<Pose>, IEnumerable Inheritance object Collection<Pose> PoseCollection Implements IList<Pose> ICollection<Pose> IList ICollection IReadOnlyList<Pose> IReadOnlyCollection<Pose> IEnumerable<Pose> IEnumerable Inherited Members Collection<Pose>.Add(Pose) Collection<Pose>.Clear() Collection<Pose>.CopyTo(Pose[], int) Collection<Pose>.Contains(Pose) Collection<Pose>.GetEnumerator() Collection<Pose>.IndexOf(Pose) Collection<Pose>.Insert(int, Pose) Collection<Pose>.Remove(Pose) Collection<Pose>.RemoveAt(int) Collection<Pose>.ClearItems() Collection<Pose>.InsertItem(int, Pose) Collection<Pose>.RemoveItem(int) Collection<Pose>.SetItem(int, Pose) Collection<Pose>.Count Collection<Pose>.Items Collection<Pose>.this[int] object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors PoseCollection(IplImage, IModelInfo) Initializes a new instance of the PoseCollection class extracted from the specified image. public PoseCollection(IplImage image, IModelInfo model) Parameters image IplImage The image from which the poses were extracted. model IModelInfo Information about the model used to extract the poses. Properties Image Gets the image from which the poses were extracted. public IplImage Image { get; } Property Value IplImage Model Gets information about the model used to extract the poses. public IModelInfo Model { get; } Property Value IModelInfo"
  },
  "api/Bonsai.Sleap.PoseIdentity.html": {
    "href": "api/Bonsai.Sleap.PoseIdentity.html",
    "title": "Class PoseIdentity | Bonsai.SLEAP",
    "keywords": "Class PoseIdentity Namespace Bonsai.Sleap Assembly Bonsai.Sleap.dll Represents the result of identity estimation as a collection of body parts and a predicted pose identity. public class PoseIdentity : Pose, IList<BodyPart>, ICollection<BodyPart>, IList, ICollection, IReadOnlyList<BodyPart>, IReadOnlyCollection<BodyPart>, IEnumerable<BodyPart>, IEnumerable Inheritance object Collection<BodyPart> KeyedCollection<string, BodyPart> Pose PoseIdentity Implements IList<BodyPart> ICollection<BodyPart> IList ICollection IReadOnlyList<BodyPart> IReadOnlyCollection<BodyPart> IEnumerable<BodyPart> IEnumerable Inherited Members Pose.Image Pose.Model Pose.Centroid Pose.GetKeyForItem(BodyPart) KeyedCollection<string, BodyPart>.Contains(string) KeyedCollection<string, BodyPart>.Remove(string) KeyedCollection<string, BodyPart>.ChangeItemKey(BodyPart, string) KeyedCollection<string, BodyPart>.ClearItems() KeyedCollection<string, BodyPart>.GetKeyForItem(BodyPart) KeyedCollection<string, BodyPart>.InsertItem(int, BodyPart) KeyedCollection<string, BodyPart>.RemoveItem(int) KeyedCollection<string, BodyPart>.SetItem(int, BodyPart) KeyedCollection<string, BodyPart>.Comparer KeyedCollection<string, BodyPart>.this[string] KeyedCollection<string, BodyPart>.Dictionary Collection<BodyPart>.Add(BodyPart) Collection<BodyPart>.Clear() Collection<BodyPart>.CopyTo(BodyPart[], int) Collection<BodyPart>.Contains(BodyPart) Collection<BodyPart>.GetEnumerator() Collection<BodyPart>.IndexOf(BodyPart) Collection<BodyPart>.Insert(int, BodyPart) Collection<BodyPart>.Remove(BodyPart) Collection<BodyPart>.RemoveAt(int) Collection<BodyPart>.ClearItems() Collection<BodyPart>.InsertItem(int, BodyPart) Collection<BodyPart>.RemoveItem(int) Collection<BodyPart>.SetItem(int, BodyPart) Collection<BodyPart>.Count Collection<BodyPart>.Items Collection<BodyPart>.this[int] object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors PoseIdentity(IplImage, IModelInfo) Initializes a new instance of the PoseIdentity class extracted from the specified image. public PoseIdentity(IplImage image, IModelInfo model) Parameters image IplImage The image from which the pose identity was extracted. model IModelInfo Information about the model used to extract the pose identity. Properties Confidence Gets or sets the maximum likelihood confidence score for the predicted identity. public float Confidence { get; set; } Property Value float Identity Gets or sets the maximum likelihood predicted pose identity. public string Identity { get; set; } Property Value string IdentityIndex Gets or sets the maximum likelihood predicted pose identity index. public int IdentityIndex { get; set; } Property Value int IdentityScores Gets or sets the predicted identity confidence scores for this instance. public float[] IdentityScores { get; set; } Property Value float[]"
  },
  "api/Bonsai.Sleap.PoseIdentityCollection.html": {
    "href": "api/Bonsai.Sleap.PoseIdentityCollection.html",
    "title": "Class PoseIdentityCollection | Bonsai.SLEAP",
    "keywords": "Class PoseIdentityCollection Namespace Bonsai.Sleap Assembly Bonsai.Sleap.dll Represents a collection of pose identities extracted from a specified image. public class PoseIdentityCollection : Collection<PoseIdentity>, IList<PoseIdentity>, ICollection<PoseIdentity>, IList, ICollection, IReadOnlyList<PoseIdentity>, IReadOnlyCollection<PoseIdentity>, IEnumerable<PoseIdentity>, IEnumerable Inheritance object Collection<PoseIdentity> PoseIdentityCollection Implements IList<PoseIdentity> ICollection<PoseIdentity> IList ICollection IReadOnlyList<PoseIdentity> IReadOnlyCollection<PoseIdentity> IEnumerable<PoseIdentity> IEnumerable Inherited Members Collection<PoseIdentity>.Add(PoseIdentity) Collection<PoseIdentity>.Clear() Collection<PoseIdentity>.CopyTo(PoseIdentity[], int) Collection<PoseIdentity>.Contains(PoseIdentity) Collection<PoseIdentity>.GetEnumerator() Collection<PoseIdentity>.IndexOf(PoseIdentity) Collection<PoseIdentity>.Insert(int, PoseIdentity) Collection<PoseIdentity>.Remove(PoseIdentity) Collection<PoseIdentity>.RemoveAt(int) Collection<PoseIdentity>.ClearItems() Collection<PoseIdentity>.InsertItem(int, PoseIdentity) Collection<PoseIdentity>.RemoveItem(int) Collection<PoseIdentity>.SetItem(int, PoseIdentity) Collection<PoseIdentity>.Count Collection<PoseIdentity>.Items Collection<PoseIdentity>.this[int] object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors PoseIdentityCollection(IplImage, IModelInfo) Initializes a new instance of the PoseIdentityCollection class extracted from the specified image. public PoseIdentityCollection(IplImage image, IModelInfo model) Parameters image IplImage The image from which the pose identities were extracted. model IModelInfo Information about the model used to extract the pose identities. Properties Image Gets the image from which the pose identities were extracted. public IplImage Image { get; } Property Value IplImage Model Gets information about the model used to extract the pose identities. public IModelInfo Model { get; } Property Value IModelInfo"
  },
  "api/Bonsai.Sleap.PredictCentroids.html": {
    "href": "api/Bonsai.Sleap.PredictCentroids.html",
    "title": "Class PredictCentroids | Bonsai.SLEAP",
    "keywords": "Class PredictCentroids Namespace Bonsai.Sleap Assembly Bonsai.Sleap.dll Represents an operator that performs multi-instance centroid detection for each image in the sequence using a SLEAP model. PredictCentroids implements the centroid network. This model is most commonly used to find a set of candidate centroids from a full-resolution image. For each frame, it will return a CentroidCollection which can be further indexed to access the individual instances. As an example application, the output of this operator is also fully compatible with the CropCenter transform node, which can be used to easily generate smaller crops centered on the detected centroid instance (i.e. Centroid) public class PredictCentroids : Transform<IplImage, CentroidCollection> Inheritance object Combinator<IplImage, CentroidCollection> Transform<IplImage, CentroidCollection> PredictCentroids Inherited Members Combinator<IplImage, CentroidCollection>.Process(IObservable<IplImage>) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties CentroidMinConfidence Gets or sets a value specifying the confidence threshold used to discard centroid predictions. If no value is specified, all estimated centroid positions are returned. [Range(0, 1)] public float? CentroidMinConfidence { get; set; } Property Value float? ColorConversion Gets or sets a value specifying the optional color conversion used to prepare RGB video frames for inference. If no value is specified, no color conversion is performed. public ColorConversion? ColorConversion { get; set; } Property Value ColorConversion? ModelFileName Gets or sets a value specifying the path to the exported Protocol Buffer file containing the pretrained SLEAP model. [FileNameFilter(\"Protocol Buffer Files(*.pb)|*.pb\")] public string ModelFileName { get; set; } Property Value string ScaleFactor Gets or sets a value specifying the scale factor used to resize video frames for inference. If no value is specified, no resizing is performed. public float? ScaleFactor { get; set; } Property Value float? TrainingConfig Gets or sets a value specifying the path to the configuration JSON file containing training metadata. [FileNameFilter(\"Config Files(*.json)|*.json|All Files|*.*\")] public string TrainingConfig { get; set; } Property Value string Methods Process(IObservable<IplImage>) Performs multi-instance centroid detection for each image in an observable sequence using a SLEAP model. public override IObservable<CentroidCollection> Process(IObservable<IplImage> source) Parameters source IObservable<IplImage> The sequence of images from which to extract the centroids. Returns IObservable<CentroidCollection> A sequence of CentroidCollection objects representing the centroids extracted from each image in the source sequence. See Also PredictPoses PredictPoseIdentities PredictSinglePose GetBodyPart"
  },
  "api/Bonsai.Sleap.PredictPoseIdentities.html": {
    "href": "api/Bonsai.Sleap.PredictPoseIdentities.html",
    "title": "Class PredictPoseIdentities | Bonsai.SLEAP",
    "keywords": "Class PredictPoseIdentities Namespace Bonsai.Sleap Assembly Bonsai.Sleap.dll Represents an operator that performs markerless multi-pose and identity estimation for each image in the sequence using a SLEAP model. PredictPoseIdentities evaluates the full SLEAP model network. In addition to extracting pose information for each detected instance in the image, it also returns the inferred identity of the object, i.e. it performs inference on the top-down-id-model network. In addition to the properties of the Pose object, the extended PoseIdentity class adds Identity property that indicates the highest confidence identity. This will match one of the class labels found in training_config.json. The IdentityScores property indicates the confidence values for all class labels. Since we are very often only interested in the instance with the highest identification confidence we have added the operator GetMaximumConfidencePoseIdentity which returns the PoseIdentity with the highest confidence from the input PoseIdentityCollection. Moreover, by specifying a value in the optional Identity property, the operator will return the instance will the highest confidence for that particular class. public class PredictPoseIdentities : Transform<IplImage, PoseIdentityCollection> Inheritance object Combinator<IplImage, PoseIdentityCollection> Transform<IplImage, PoseIdentityCollection> PredictPoseIdentities Inherited Members Combinator<IplImage, PoseIdentityCollection>.Process(IObservable<IplImage>) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties CentroidMinConfidence Gets or sets a value specifying the confidence threshold used to discard centroid predictions. If no value is specified, all estimated centroid positions are returned. [Range(0, 1)] public float? CentroidMinConfidence { get; set; } Property Value float? ColorConversion Gets or sets a value specifying the optional color conversion used to prepare RGB video frames for inference. If no value is specified, no color conversion is performed. public ColorConversion? ColorConversion { get; set; } Property Value ColorConversion? IdentityMinConfidence Gets or sets a value specifying the confidence threshold used to assign an identity class. If no value is specified, the identity with highest confidence will be assigned to each pose. [Range(0, 1)] public float? IdentityMinConfidence { get; set; } Property Value float? ModelFileName Gets or sets a value specifying the path to the exported Protocol Buffer file containing the pretrained SLEAP model. [FileNameFilter(\"Protocol Buffer Files(*.pb)|*.pb\")] public string ModelFileName { get; set; } Property Value string PartMinConfidence Gets or sets a value specifying the confidence threshold used to discard predicted body part positions. If no value is specified, all estimated positions are returned. [Range(0, 1)] public float? PartMinConfidence { get; set; } Property Value float? ScaleFactor Gets or sets a value specifying the scale factor used to resize video frames for inference. If no value is specified, no resizing is performed. public float? ScaleFactor { get; set; } Property Value float? TrainingConfig Gets or sets a value specifying the path to the configuration JSON file containing training metadata. [FileNameFilter(\"Config Files(*.json)|*.json|All Files|*.*\")] public string TrainingConfig { get; set; } Property Value string Methods Process(IObservable<IplImage>) Performs markerless multi-pose and identity estimation for each image in an observable sequence using a SLEAP model. public override IObservable<PoseIdentityCollection> Process(IObservable<IplImage> source) Parameters source IObservable<IplImage> The sequence of images from which to extract the pose identities. Returns IObservable<PoseIdentityCollection> A sequence of PoseIdentityCollection objects representing the pose identities extracted from each image in the source sequence. See Also PredictCentroids PredictPoses PredictSinglePose GetBodyPart GetMaximumConfidencePoseIdentity"
  },
  "api/Bonsai.Sleap.PredictPoses.html": {
    "href": "api/Bonsai.Sleap.PredictPoses.html",
    "title": "Class PredictPoses | Bonsai.SLEAP",
    "keywords": "Class PredictPoses Namespace Bonsai.Sleap Assembly Bonsai.Sleap.dll Represents an operator that performs markerless multi-pose estimation for each image in the sequence using a SLEAP model. PredictPoses implements the [top-down-model network]. The usual input of this operation will be a sequence of full frames where multiple instances are expected to be found. This operator will output a PoseCollection with N number of instances found in the image. Indexing a PoseCollection will return a Pose where we can access the Centroid of each detected instance along with the Pose containing information on all trained body parts. To access the data of a specific body part we use the GetBodyPart. We set Name to match the part name defined in the training_config.json file. From that moment, the operator will always emit the selected BodyPart object and its inferred position (BodyPart.Position). public class PredictPoses : Transform<IplImage, PoseCollection> Inheritance object Combinator<IplImage, PoseCollection> Transform<IplImage, PoseCollection> PredictPoses Inherited Members Combinator<IplImage, PoseCollection>.Process(IObservable<IplImage>) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties CentroidMinConfidence Gets or sets a value specifying the confidence threshold used to discard centroid predictions. If no value is specified, all estimated centroid positions are returned. [Range(0, 1)] public float? CentroidMinConfidence { get; set; } Property Value float? ColorConversion Gets or sets a value specifying the optional color conversion used to prepare RGB video frames for inference. If no value is specified, no color conversion is performed. public ColorConversion? ColorConversion { get; set; } Property Value ColorConversion? ModelFileName Gets or sets a value specifying the path to the exported Protocol Buffer file containing the pretrained SLEAP model. [FileNameFilter(\"Protocol Buffer Files(*.pb)|*.pb\")] public string ModelFileName { get; set; } Property Value string PartMinConfidence Gets or sets a value specifying the confidence threshold used to discard predicted body part positions. If no value is specified, all estimated positions are returned. [Range(0, 1)] public float? PartMinConfidence { get; set; } Property Value float? ScaleFactor Gets or sets a value specifying the scale factor used to resize video frames for inference. If no value is specified, no resizing is performed. public float? ScaleFactor { get; set; } Property Value float? TrainingConfig Gets or sets a value specifying the path to the configuration JSON file containing training metadata. [FileNameFilter(\"Config Files(*.json)|*.json|All Files|*.*\")] public string TrainingConfig { get; set; } Property Value string Methods Process(IObservable<IplImage>) Performs markerless multi-pose estimation for each image in an observable sequence using a SLEAP model. public override IObservable<PoseCollection> Process(IObservable<IplImage> source) Parameters source IObservable<IplImage> The sequence of images from which to extract the poses. Returns IObservable<PoseCollection> A sequence of PoseCollection objects representing the poses extracted from each image in the source sequence. See Also PredictCentroids PredictPoseIdentities PredictSinglePose GetBodyPart"
  },
  "api/Bonsai.Sleap.PredictSinglePose.html": {
    "href": "api/Bonsai.Sleap.PredictSinglePose.html",
    "title": "Class PredictSinglePose | Bonsai.SLEAP",
    "keywords": "Class PredictSinglePose Namespace Bonsai.Sleap Assembly Bonsai.Sleap.dll Represents an operator that performs markerless, single instance, pose estimation for each image in the sequence using a SLEAP model. Almost all SLEAP operators afford the detection of multiple instances for each incoming image. However, in certain cases we might be interested in only identifying a single object in the incoming image. This strategy offers multiple advantages, specifically in terms of performance. In Bonsai.SLEAP, this functionality is implemented using the PredictSinglePose operator that implements a single_instance network. Since the centroid detection step is not performed by the network, the operator expects an already centered instance on which it will run the pose estimation. Moreover, the network will always return a single output per incoming frame, even if no valid instances are detected. The following example workflow highlights how combining basic computer-vision algorithm for image segmentation for centroid detection, with the network-based pose estimation, results in >2-fold increases in performance relative to the previously introduced PredictPoses operator. In this example, the first part of the workflow segments and detects the centroid positions (output of BinaryRegionAnalysis) of all available objects in the incoming frame, which are then combined with the original image to generate centered crops (CropCenter). These images are then pushed through the network that will perform the pose estimation step of the process. Finally, it is worth noting that PredictSinglePose affords two input overloads. When receiving a single image it will output a corresponding Pose. Since the operator skips the centroid-detection stage, it won't embed a Centroid field in Pose. Alternatively, a batch mode can be accessed by providing an array of images to the operator, instead returning PoseCollection. This latter overload results in dramatic performance gains relative to single images. public class PredictSinglePose : Transform<IplImage, Pose> Inheritance object Combinator<IplImage, Pose> Transform<IplImage, Pose> PredictSinglePose Inherited Members Combinator<IplImage, Pose>.Process(IObservable<IplImage>) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties ColorConversion Gets or sets a value specifying the optional color conversion used to prepare RGB video frames for inference. If no value is specified, no color conversion is performed. public ColorConversion? ColorConversion { get; set; } Property Value ColorConversion? ModelFileName Gets or sets a value specifying the path to the exported Protocol Buffer file containing the pretrained SLEAP model. [FileNameFilter(\"Protocol Buffer Files(*.pb)|*.pb\")] public string ModelFileName { get; set; } Property Value string PartMinConfidence Gets or sets a value specifying the confidence threshold used to discard predicted body part positions. If no value is specified, all estimated positions are returned. [Range(0, 1)] public float? PartMinConfidence { get; set; } Property Value float? ScaleFactor Gets or sets a value specifying the scale factor used to resize video frames for inference. If no value is specified, no resizing is performed. public float? ScaleFactor { get; set; } Property Value float? TrainingConfig Gets or sets a value specifying the path to the configuration JSON file containing training metadata. [FileNameFilter(\"Config Files(*.json)|*.json|All Files|*.*\")] public string TrainingConfig { get; set; } Property Value string Methods Process(IObservable<IplImage[]>) Performs markerless, single instance, batched pose estimation for each array of images in an observable sequence using a SLEAP model. public IObservable<IList<Pose>> Process(IObservable<IplImage[]> source) Parameters source IObservable<IplImage[]> The sequence of image batches from which to extract the poses. Returns IObservable<IList<Pose>> A sequence of Pose collection objects representing the results of pose estimation for each image batch in the source sequence. Process(IObservable<IplImage>) Performs markerless, single instance, pose estimation for each image in an observable sequence using a SLEAP model. public override IObservable<Pose> Process(IObservable<IplImage> source) Parameters source IObservable<IplImage> The sequence of images from which to extract the pose. Returns IObservable<Pose> A sequence of Pose objects representing the result of pose estimation for each image in the source sequence. See Also PredictCentroids PredictPoses PredictPoseIdentities GetBodyPart"
  },
  "api/Bonsai.Sleap.UnexpectedModelTypeException.html": {
    "href": "api/Bonsai.Sleap.UnexpectedModelTypeException.html",
    "title": "Class UnexpectedModelTypeException | Bonsai.SLEAP",
    "keywords": "Class UnexpectedModelTypeException Namespace Bonsai.Sleap Assembly Bonsai.Sleap.dll The exception that is thrown when a SLEAP model is unexpected for the inference operator. [Serializable] public class UnexpectedModelTypeException : InvalidOperationException, ISerializable, _Exception Inheritance object Exception SystemException InvalidOperationException UnexpectedModelTypeException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.MemberwiseClone() Constructors UnexpectedModelTypeException() Initializes a new instance of the UnexpectedModelTypeException class. public UnexpectedModelTypeException() UnexpectedModelTypeException(string) Initializes a new instance of the UnexpectedModelTypeException class with a specified error message. public UnexpectedModelTypeException(string message) Parameters message string The message that describes the error. UnexpectedModelTypeException(string, Exception) Initializes a new instance of the UnexpectedModelTypeException class with a specified error message and a reference to the inner exception that is the cause of this exception. public UnexpectedModelTypeException(string message, Exception innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception, or null if no inner exception is specified."
  },
  "api/Bonsai.Sleap.html": {
    "href": "api/Bonsai.Sleap.html",
    "title": "Namespace Bonsai.Sleap | Bonsai.SLEAP",
    "keywords": "Namespace Bonsai.Sleap Classes BodyPart Represents a body part, or node in the skeleton graph of the animal. Nodes can be defined without being part of a skeleton. Centroid Represents a center point used for cropping. CentroidCollection Represents a collection of image centroids. FindPoseIdentityMatching Represents an operator that returns a collection of poses where each distinct identity class has been matched to a single high confidence pose. GetBodyPart Represents an operator that returns the body part with the specified name for each pose in the sequence. GetMaximumConfidencePoseIdentity Represents an operator that returns the pose with the highest identity confidence for each collection in the sequence, using the optional class label. Pose Represents the result of pose estimation as a collection of body parts. PoseCollection Represents a collection of poses extracted from a specified image. PoseIdentity Represents the result of identity estimation as a collection of body parts and a predicted pose identity. PoseIdentityCollection Represents a collection of pose identities extracted from a specified image. PredictCentroids Represents an operator that performs multi-instance centroid detection for each image in the sequence using a SLEAP model. PredictPoseIdentities Represents an operator that performs markerless multi-pose and identity estimation for each image in the sequence using a SLEAP model. PredictPoses Represents an operator that performs markerless multi-pose estimation for each image in the sequence using a SLEAP model. PredictSinglePose Represents an operator that performs markerless, single instance, pose estimation for each image in the sequence using a SLEAP model. UnexpectedModelTypeException The exception that is thrown when a SLEAP model is unexpected for the inference operator. Interfaces IModelInfo Provides information about the model used for inference. Enums ModelType Specifies the type of SLEAP model."
  },
  "articles/manual.html": {
    "href": "articles/manual.html",
    "title": "How to use | Bonsai.SLEAP",
    "keywords": "How to use Bonsai.Sleap currently implements real-time inference on four distinct SLEAP networks through their corresponding Bonsai Predict operators. flowchart TD id1(\"`**IplImage**`\") --> id7(Multiple Instances) id1 --> id8(Single Instance) id7 -- centroid --> id3(\"`**PredictCentroids** Returns multiple: *Centroid*`\") id7 -- top-down-model --> id4(\"`**PredictPoses** Returns multiple: *Centroid*, *Pose*`\") id7 -- top-down-id-model --> id5(\"`**PredictPoseIdentities** Returns multiple: *Centroid*, *Pose*, *Identity*`\") id8 -- single_instance --> id2(\"`**PredictSinglePose** Returns single: *Pose*`\") In order to use the Predict operators, you will need to provide the ModelFileName to the exported .pb file folder containing your pre-trained SLEAP model, along with the corresponding PoseConfigFileName to the training_config.json file. The simplest Bonsai workflow for running the complete SLEAP top-down-id-model is: If everything works out, you should see some indication in the Bonsai command line window that the GPU was successfully detected and enabled. The first frame will cold start the inference graph and this may take a bit of time, but after that, your poses should start streaming through! Working examples for each of these operators can be found in the extended descriptions, which we cover below. PredictCentroids PredictCentroids implements the centroid network. This model is most commonly used to find a set of candidate centroids from a full-resolution image. For each frame, it will return a CentroidCollection which can be further indexed to access the individual instances. As an example application, the output of this operator is also fully compatible with the CropCenter transform node, which can be used to easily generate smaller crops centered on the detected centroid instance (i.e. Centroid) PredictPoses PredictPoses implements the [top-down-model network]. The usual input of this operation will be a sequence of full frames where multiple instances are expected to be found. This operator will output a PoseCollection with N number of instances found in the image. Indexing a PoseCollection will return a Pose where we can access the Centroid of each detected instance along with the Pose containing information on all trained body parts. To access the data of a specific body part we use the GetBodyPart. We set Name to match the part name defined in the training_config.json file. From that moment, the operator will always emit the selected BodyPart object and its inferred position (BodyPart.Position). PredictPoseIdentities PredictPoseIdentities evaluates the full SLEAP model network. In addition to extracting pose information for each detected instance in the image, it also returns the inferred identity of the object, i.e. it performs inference on the top-down-id-model network. In addition to the properties of the Pose object, the extended PoseIdentity class adds Identity property that indicates the highest confidence identity. This will match one of the class labels found in training_config.json. The IdentityScores property indicates the confidence values for all class labels. Since we are very often only interested in the instance with the highest identification confidence we have added the operator GetMaximumConfidencePoseIdentity which returns the PoseIdentity with the highest confidence from the input PoseIdentityCollection. Moreover, by specifying a value in the optional Identity property, the operator will return the instance will the highest confidence for that particular class. PredictSinglePose Almost all SLEAP operators afford the detection of multiple instances for each incoming image. However, in certain cases we might be interested in only identifying a single object in the incoming image. This strategy offers multiple advantages, specifically in terms of performance. In Bonsai.SLEAP, this functionality is implemented using the PredictSinglePose operator that implements a single_instance network. Since the centroid detection step is not performed by the network, the operator expects an already centered instance on which it will run the pose estimation. Moreover, the network will always return a single output per incoming frame, even if no valid instances are detected. The following example workflow highlights how combining basic computer-vision algorithm for image segmentation for centroid detection, with the network-based pose estimation, results in >2-fold increases in performance relative to the previously introduced PredictPoses operator. In this example, the first part of the workflow segments and detects the centroid positions (output of BinaryRegionAnalysis) of all available objects in the incoming frame, which are then combined with the original image to generate centered crops (CropCenter). These images are then pushed through the network that will perform the pose estimation step of the process. Finally, it is worth noting that PredictSinglePose affords two input overloads. When receiving a single image it will output a corresponding Pose. Since the operator skips the centroid-detection stage, it won't embed a Centroid field in Pose. Alternatively, a batch mode can be accessed by providing an array of images to the operator, instead returning PoseCollection. This latter overload results in dramatic performance gains relative to single images."
  },
  "articles/sleap-intro.html": {
    "href": "articles/sleap-intro.html",
    "title": "| Bonsai.SLEAP",
    "keywords": "The simplest Bonsai workflow for running the complete SLEAP top-down-id-model is: If everything works out, you should see some indication in the Bonsai command line window that the GPU was successfully detected and enabled. The first frame will cold start the inference graph and this may take a bit of time, but after that, your poses should start streaming through!"
  },
  "articles/sleap-predictcentroids.html": {
    "href": "articles/sleap-predictcentroids.html",
    "title": "PredictCentroids | Bonsai.SLEAP",
    "keywords": "PredictCentroids implements the centroid network. This model is most commonly used to find a set of candidate centroids from a full-resolution image. For each frame, it will return a CentroidCollection which can be further indexed to access the individual instances. As an example application, the output of this operator is also fully compatible with the CropCenter transform node, which can be used to easily generate smaller crops centered on the detected centroid instance (i.e. Centroid)"
  },
  "articles/sleap-predictposeidentities.html": {
    "href": "articles/sleap-predictposeidentities.html",
    "title": "PredictPoseIdentities | Bonsai.SLEAP",
    "keywords": "PredictPoseIdentities evaluates the full SLEAP model network. In addition to extracting pose information for each detected instance in the image, it also returns the inferred identity of the object, i.e. it performs inference on the top-down-id-model network. In addition to the properties of the Pose object, the extended PoseIdentity class adds Identity property that indicates the highest confidence identity. This will match one of the class labels found in training_config.json. The IdentityScores property indicates the confidence values for all class labels. Since we are very often only interested in the instance with the highest identification confidence we have added the operator GetMaximumConfidencePoseIdentity which returns the PoseIdentity with the highest confidence from the input PoseIdentityCollection. Moreover, by specifying a value in the optional Identity property, the operator will return the instance will the highest confidence for that particular class."
  },
  "articles/sleap-predictposes.html": {
    "href": "articles/sleap-predictposes.html",
    "title": "PredictPoses | Bonsai.SLEAP",
    "keywords": "PredictPoses implements the [top-down-model network]. The usual input of this operation will be a sequence of full frames where multiple instances are expected to be found. This operator will output a PoseCollection with N number of instances found in the image. Indexing a PoseCollection will return a Pose where we can access the Centroid of each detected instance along with the Pose containing information on all trained body parts. To access the data of a specific body part we use the GetBodyPart. We set Name to match the part name defined in the training_config.json file. From that moment, the operator will always emit the selected BodyPart object and its inferred position (BodyPart.Position)."
  },
  "articles/sleap-predictsinglepose.html": {
    "href": "articles/sleap-predictsinglepose.html",
    "title": "PredictSinglePose | Bonsai.SLEAP",
    "keywords": "Almost all SLEAP operators afford the detection of multiple instances for each incoming image. However, in certain cases we might be interested in only identifying a single object in the incoming image. This strategy offers multiple advantages, specifically in terms of performance. In Bonsai.SLEAP, this functionality is implemented using the PredictSinglePose operator that implements a single_instance network. Since the centroid detection step is not performed by the network, the operator expects an already centered instance on which it will run the pose estimation. Moreover, the network will always return a single output per incoming frame, even if no valid instances are detected. The following example workflow highlights how combining basic computer-vision algorithm for image segmentation for centroid detection, with the network-based pose estimation, results in >2-fold increases in performance relative to the previously introduced PredictPoses operator. In this example, the first part of the workflow segments and detects the centroid positions (output of BinaryRegionAnalysis) of all available objects in the incoming frame, which are then combined with the original image to generate centered crops (CropCenter). These images are then pushed through the network that will perform the pose estimation step of the process. Finally, it is worth noting that PredictSinglePose affords two input overloads. When receiving a single image it will output a corresponding Pose. Since the operator skips the centroid-detection stage, it won't embed a Centroid field in Pose. Alternatively, a batch mode can be accessed by providing an array of images to the operator, instead returning PoseCollection. This latter overload results in dramatic performance gains relative to single images."
  },
  "assets/README.html": {
    "href": "assets/README.html",
    "title": "docfx-assets | Bonsai.SLEAP",
    "keywords": "docfx-assets Common assets used for package documentation. How to use To use these assets in a docfx website, first clone this repository as a submodule: git submodule add https://github.com/bonsai-rx/docfx-assets assets Then modify docfx.json to include the asset files under the \"resource\" section: { \"files\": [ \"logo.svg\", \"favicon.ico\" ], \"src\": \"assets\" } Licensing Copyright (c) 2024 Bonsai Foundation CIC and Contributors You may use, copy, modify and redistribute all assets included in this repository according to the terms and conditions of the Creative Commons Attribution 4.0 International License. See the LICENSE file for details."
  },
  "index.html": {
    "href": "index.html",
    "title": "Getting Started | Bonsai.SLEAP",
    "keywords": "Getting Started Bonsai.SLEAP is a Bonsai interface for SLEAP allowing multi-animal, real-time, pose and identity estimation using pretrained network models stored in a Protocol buffer (.pb) format. Bonsai.SLEAP loads these .pb files using TensorFlowSharp, a set of .NET bindings for TensorFlow allowing native inference using either the CPU or GPU. By using the .pb file and the corresponding configuration file (training_config.json), the PredictFullModelPose operator from Bonsai.SLEAP will push the live image data through the inference network and output a set of identified poses from which you can extract an object id and specific object part position. Bonsai can then leverage this data to drive online effectors or simply save it to an output file. How to install Bonsai.SLEAP can be downloaded through the Bonsai package manager. In order to get visualizer support, you should download both the Bonsai.Sleap and Bonsai.Sleap.Design packages. However, in order to use it for either CPU or GPU inference, you need to pair it with a compiled native TensorFlow binary. You can find precompiled binaries for Windows 64-bit at https://www.tensorflow.org/install/lang_c. To use GPU TensorFlow (highly recommended for live inference), you also need to install the CUDA Toolkit and the cuDNN libraries. This package was developed and tested with CUDA v11.3 and cuDNN 8.2. Additionally, make sure you have a CUDA compatible GPU with the latest NVIDIA drivers. After downloading the native TensorFlow binary and cuDNN, you can follow these steps to get the required native files into the Extensions folder of your local Bonsai install: The easiest way to find your Bonsai install folder is to right-click on the Bonsai shortcut > Properties. The path to the folder will be shown in the \"Start in\" textbox; Copy tensorflow.dll file from either the CPU or GPU tensorflow release to the Extensions folder; If you are using TensorFlow GPU, make sure to add the cuda/bin folder of your cuDNN download to the PATH environment variable, or copy all DLL files to the Extensions folder. Tip For all questions regarding installation and use of SLEAP for training models, please check the official docs. Simple example The simplest Bonsai workflow for running the complete SLEAP top-down-id-model is: If everything works out, you should see some indication in the Bonsai command line window that the GPU was successfully detected and enabled. The first frame will cold start the inference graph and this may take a bit of time, but after that, your poses should start streaming through! Acknowledgments The Bonsai.SLEAP package came about following a fruitful discussion with the SLEAP team during the Quantitative Approaches to Behaviour."
  }
}